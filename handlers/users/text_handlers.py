from data.loader import bot, dp, db
from aiogram.types import Message, LabeledPrice, ShippingOption, Update, ReplyKeyboardRemove
from data.configs import NUMBERS
from aiogram.dispatcher import FSMContext
from states.states import Form, Feedback
import random
import re
from keyboards.reply import generate_main_menu, generate_categories, settings_change_name_phone
from keyboards.inline import generate_product_detail, change_user_data


async def start_register(message: Message):
    chat_id = message.chat.id
    text = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é'
    # –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤–æ–ø—Ä–æ—Å
    await Form.full_name.set()
    await bot.send_message(chat_id, text)


@dp.message_handler(state=Form.full_name, regexp=r'[–ê-–Ø–∞-—èA-Za-z]+ [–ê-–Ø–∞-—èA-Za-z]+')  # –°–∏–≥–Ω–∞–ª —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç
async def get_full_name_ask_phone(message: Message, state: FSMContext):
    # –û—Ç–∫—Ä—ã—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    async with state.proxy() as data:
        data['full_name'] = message.text
    # await Form.phone.set()
    await Form.next()
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–í —Ñ–æ—Ä–º–∞—Ç–µ +998901234567')


@dp.message_handler(state=Form.full_name)
async def get_error_name(message: Message, state: FSMContext):
    await bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@dp.message_handler(state=Form.phone)
async def get_phone_ask_key(message: Message, state: FSMContext):
    chat_id = message.chat.id
    if re.search(r'^\+998\d{9}$', message.text):
        text = ' '.join([random.choice(list(NUMBERS)) for i in range(4)])
        answer = ''.join([str(NUMBERS[key]) for key in text.split(' ')])
        async with state.proxy() as data:
            data['phone'] = message.text
            data['answer'] = answer
        message_to_user = f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {answer}\n\n{text}'
        await Form.next()
        await bot.send_message(chat_id, message_to_user)
    else:
        await bot.send_message(chat_id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@dp.message_handler(state=Form.key)
async def get_key_ask_finish_register(message: Message, state: FSMContext):
    chat_id = message.chat.id
    user_exists = db.get_user_by_id(chat_id)
    async with state.proxy() as data:
        answer = data['answer']
        if message.text == answer:
            full_name = data['full_name']
            phone = data['phone']
            if user_exists:
                db.update_user_fullname_phone(chat_id, full_name, phone)
                await bot.send_message(chat_id, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
            else:
                db.save_user(chat_id, full_name, phone)
                await bot.send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
            await state.finish()
            await show_main_menu(message)
        else:
            await bot.send_message(chat_id, '–ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@dp.message_handler(regexp='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def show_main_menu(message: Message):
    chat_id = message.chat.id
    message_id = message.message_id
    await bot.delete_message(chat_id, message_id)
    try:
        await bot.delete_message(chat_id, message_id - 1)
    except:
        pass
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö',
                           reply_markup=generate_main_menu())


@dp.message_handler(regexp='(üç¥ –ú–µ–Ω—é|–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)')
async def show_categories(message: Message):
    chat_id = message.chat.id
    message_id = message.message_id
    await bot.delete_message(chat_id, message_id)
    try:
        await bot.delete_message(chat_id, message_id - 1)
    except:
        pass
    categories = db.get_categories()
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                     reply_markup=generate_categories(categories, 'categories'))


categories = [i[0] for i in db.get_categories()] # [(''), ('')] -> ['', '']


@dp.message_handler(lambda message: message.text in categories)
async def show_products(message: Message):
    chat_id = message.chat.id

    category_name = message.text
    message_id = message.message_id
    await bot.delete_message(chat_id, message_id)
    await bot.delete_message(chat_id, message_id - 1)
    category_id, image = db.get_category_detail(category_name)
    products = db.get_products_names(category_id)
    with open(image, mode='rb') as img:
        await bot.send_photo(chat_id, img, reply_markup=generate_categories(products, 'products'))

products = [i[0] for i in db.get_all_products_names()]  # [(), ()] -> ['', '']


@dp.message_handler(lambda message: message.text in products)
async def product_detail(message: Message):
    chat_id = message.chat.id
    product_name = message.text
    # –ù–∞–¥–æ –≤–∑—è—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = db.get_product_detail(product_name)
    message_id = message.message_id
    await bot.delete_message(chat_id, message_id)
    await bot.delete_message(chat_id, message_id - 1)
    with open(product[4], mode='rb') as img:
        text = f'''{product[1]}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product[3]}

<b>–¶–µ–Ω–∞:</b> {product[2]} —Å—É–º'''
        await bot.send_photo(chat_id, img, caption=text, reply_markup=generate_product_detail(product[0], product[-1], 1))


EXPRESS_SHIPPING = ShippingOption(
    id='post_express',
    title='–î–æ 3—Ö —á–∞—Å–æ–≤',
    prices=[LabeledPrice('–î–æ 3—Ö —á–∞—Å–æ–≤', 25_000_00)]
)

REGULAR_SHIPPING = ShippingOption(
    id='post_regular',
    title='–°–∞–º–æ–≤—ã–≤–æ–∑',
    prices=[LabeledPrice('–°–∞–º–æ–≤—ã–≤–æ–∑', 0)]
)

REGION_SHIPPING = ShippingOption(
    id='post_region',
    title='–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã',
    prices=[LabeledPrice('–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã', 250_000_00)]
)


@dp.message_handler(regexp='–ö–æ—Ä–∑–∏–Ω–∞ üõí')
async def show_cart_text(message: Message):
    try:
        chat_id = message.chat.id
        cart_id = db.get_cart_id(chat_id)
        # –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Ü–µ–Ω—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        db.update_total_price_quantity(cart_id)
        # –í—ã—Ç–∞—â–∏—Ç—å –æ–±—â—É—é —Ü–µ–Ω—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_products, total_price = db.get_total_price_quantity(cart_id)
        # –í—ã—Ç–∞—â–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_products = db.get_cart_products(cart_id)  # [(1,2,3), ()]
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n'
        i = 0
        for cart_product_id, product_name, quantity, final_price in cart_products:
            i += 1
            text += f'''{i}. {product_name}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price}\n\n'''

        text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {0 if total_products is None else total_products}\n\n
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {0 if total_price is None else total_price}'''

        await bot.send_invoice(chat_id=chat_id,
                               title='–õ—É—á—à–∏–π —Ç–≥-–±–æ—Ç –º–∞–≥–∞–∑–∏–Ω',
                               description=text,
                               payload='bot-defined invoice payload',
                               provider_token='TOKEN',
                               currency='UZS',
                               need_name=True,
                               is_flexible=True,
                               prices=[
                                   LabeledPrice(
                                       label=f'{data[1]} - {data[2]}',
                                       amount=int(data[3] * 100)
                                   ) for data in cart_products
                               ])
    except:
        textt = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É'
        await bot.send_message(message.chat.id, textt, reply_markup=generate_main_menu())


@dp.message_handler(regexp='üõç –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def my_orders(message: Message):
    chat_id = message.chat.id
    try:
        cart_id = db.get_cart_id(chat_id)
    except:
        db.create_cart_for_user(chat_id)
        cart_id = db.get_cart_id(chat_id)

    all_user_orders = db.get_all_orders(cart_id)
    order_prices = [i[2] for i in all_user_orders]
    all_order_id = [i[0] for i in all_user_orders]

    text = f'<b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n'

    for order_id in all_order_id:
        order = db.get_all_order_products(order_id)

        text += f'''–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n\n'''
        i = 0
        price = f'<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order_prices[i]}\n\n'

        for product in order:

            i += 1
            text += f'''{i}. {product[2]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[3]}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {product[4]}\n
'''
        text += price

    await bot.send_message(chat_id, text, reply_markup=generate_main_menu())


@dp.message_handler(regexp='‚úç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
async def user_feedback(message: Message):

    chat_id = message.chat.id
    userfullname = message.from_user.full_name
    textt = f'{userfullname}, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤!\n\n<b>–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å:</b>'
    await Feedback.otziv.set()
    await bot.send_message(chat_id, textt, reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=Feedback.otziv, content_types=['sticker', 'photo', 'voice', 'text', 'gif'])
async def get_feedback(message: Message, state: FSMContext):

    manager_id = -862926535  # id –≥—Ä—É–ø–ø—ã/—á–∞—Ç–∞ –∫—É–¥–∞ –ø—Ä–∏–¥–µ—Ç –æ—Ç–∑—ã–≤
    if message.text:
        await bot.send_message(manager_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{message.from_user.full_name}</b> –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤!\n\n"{message.text}"')
        await state.finish()
        await bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!', reply_markup=generate_main_menu())
    else:
        await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Å–Ω–æ–≤–∞')


@dp.message_handler(regexp='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings(message: Message):
    chat_id = message.chat.id
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    await bot.send_message(chat_id, text, reply_markup=settings_change_name_phone())


@dp.message_handler(regexp='üë§–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
async def change_name_phone(message: Message):
    chat_id = message.chat.id
    full_name, phone = db.get_user_fullname_phone(chat_id)
    text = f'''–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?\n
–í–∞—à–µ –∏–º—è: {full_name}
–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å–≤—Ç–∏–µ:
'''
    await bot.send_message(chat_id, text, reply_markup=change_user_data())





